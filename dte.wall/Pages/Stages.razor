@page "/stages"
@using DateTimeExtensions
@inject Edition2023Service Service
@inject NavigationManager NavManager


<PageTitle>dTE 2023 - Up next</PageTitle>

@if (NextSessions.Any())
{
    <div class="row">
        @foreach (var group in NextSessions)
            {
            <div class="col card-group">
                <SessionCard Session="group.First()" Date="GetReferenceDateTime()"></SessionCard>
            </div>
            }
    </div>

    <div class="row pt-3">
        @foreach (var group in NextSessions)
            {
            <div class="col card-group">
                <SessionCard Session="group.ElementAtOrDefault(1)" Date="GetReferenceDateTime()"></SessionCard>
            </div>
            }
    </div>
}
else if (NextTime != null)
{
    <div class="row py-3">
        <div class="col text-center">
            <h2>On stage in @NextTime</h2>
        </div>
    </div>
    <div class="row py-4">
        <div class="col">
            <h4>Check out at @HighlightSession.Start.ToShortTimeString()</h4>
            <SessionCard Session="HighlightSession" Date="GetReferenceDateTime()"></SessionCard>
        </div>
    </div>
}
else
{
    <div class="row py-3">
        <div class="col text-center">
            <h2>Thanks for joining, see you again next year</h2>
        </div>
    </div>
}

@code
{
    public ConferenceData? ConferenceData { get; set; }
    public IEnumerable<IGrouping<int, Summary>> NextSessions { get; set; } = Enumerable.Empty<IGrouping<int, Summary>>();
    public Summary? HighlightSession { get; set; }
    public string? NextTime { get; set; }
    public int? RoomFilter { get; set; }

    private Timer? _timer;
    private Random _random = new Random();

    protected override async Task OnInitializedAsync()
    {
        ConferenceData = await Service.GetConferenceDataAsync();

        var stageName = NavManager.QueryString("stage");

        if (!string.IsNullOrEmpty(stageName))
        {
            RoomFilter = ConferenceData.Rooms
                .Where(r => r.Name.Equals(stageName, StringComparison.InvariantCultureIgnoreCase))
                .SingleOrDefault()?.Id;
        }

        _timer = new System.Threading.Timer(async _ =>  // async void
        {
            DetermineSessions();
            await InvokeAsync(StateHasChanged);
        }, null, 0, 30000);
    }

    public DateTime GetReferenceDateTime()
    {
        var time = NavManager.QueryString("time");

        if (time == null)
        {
            return DateTime.Now;
        }

        var eventDate = new DateTime(2023, 3, 23);
        var timeOfDay = TimeSpan.Parse(time);

        return eventDate.Add(timeOfDay);
    }

    public void DetermineSessions()
    {
        var time = GetReferenceDateTime();

        if (ConferenceData == null)
        {
            return;
        }

        var sessions = ConferenceData.Sessions.AsEnumerable();

        if (RoomFilter.HasValue)
        {
            sessions = sessions.Where(s => s.RoomId == RoomFilter);
        }

        NextSessions = sessions
            .Where(s => s.StartsAt <= time.AddMinutes(15) && s.EndsAt > time.AddMinutes(5))
            .Select(s => Summary.FromSession(s, ConferenceData))
            .OrderBy(s => s.RoomSort)
            .ThenBy(s => s.Start)
            .GroupBy(s => s.RoomSort);

        if (NextSessions.Any())
        {
            NextTime = null;
        }
        else
        {
            var nextSession = sessions
                .Where(s => s.StartsAt > time)
                .MinBy(s => s.StartsAt);

            NextTime = nextSession == null ? null : time.ToNaturalText(nextSession.StartsAt, true);
        }

        if (NextTime == null)
        {
            HighlightSession = null;
        }
        else
        {
            var applicableSessions = sessions.Where(s => s.StartsAt > time);
            var session = applicableSessions.ElementAt(_random.Next(0, applicableSessions.Count()));

            HighlightSession = Summary.FromSession(session, ConferenceData);
        }
    }
}
